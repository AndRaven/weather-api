<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd ">
    <munit:config name="weather-api-apikit-test.xml" />
    <http:request-config name="HTTP_Request_Configuration" basePath="/api">
        <http:request-connection host="localhost" port="8081" />
    </http:request-config>
    <munit:test name="get:\cities\(name)\weather:weather-api-config-200-application\json-FlowTest" description="Verifying functionality of [get:\cities\(name)\weather:weather-api-config-200-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="weather-api-main" />
            <munit:enable-flow-source value="get:\cities\(name)\weather:weather-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="name" value="#['Melbourne']" doc:name="name" />
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="#['/cities/$(vars.name)/weather']">
                <http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
                <http:query-params><![CDATA[#[{"country":"Australia"}]]]></http:query-params>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_cities_{name}_weather_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\cities\(name)\weather:test-error-when-empty-param" description="Verifying functionality of [get:\cities\(name)\weather:weather-api-config-400-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="weather-api-main" />
            <munit:enable-flow-source value="get:\cities\(name)\weather:weather-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="name" value="#['Melbourne']" doc:name="name" />
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="#['/cities/$(vars.name)/weather']">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
                <http:query-params>#[{"country":""}]</http:query-params>
                <http:response-validator>
                    <http:success-status-code-validator values="400" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_400_cities_{name}_weather_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\cities:weather-api-config-200-application\json-FlowTest" description="Verifying functionality of [get:\cities:weather-api-config-200-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="weather-api-main" />
            <munit:enable-flow-source value="get:\cities:weather-api-config" />
        </munit:enable-flow-sources>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/cities">
                <http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
                <http:query-params><![CDATA[#[{"country":"Australia"}]]]></http:query-params>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_cities_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\cities:test-error-when-empty-query-param" description="Verifying functionality of [get:\cities:weather-api-config-400-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="weather-api-main" />
            <munit:enable-flow-source value="get:\cities:weather-api-config" />
        </munit:enable-flow-sources>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/cities">
                <http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
                <http:query-params><![CDATA[#[{"country":""}]]]></http:query-params>
                <http:response-validator>
                    <http:success-status-code-validator values="400" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_400_cities_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\cities:test-error-when-unavailable-web-service" expectedErrorType="HTTP:INTERNAL_SERVER_ERROR">
       <munit:enable-flow-sources>
            <munit:enable-flow-source value="weather-api-main" />
            <munit:enable-flow-source value="get:\cities:weather-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock error when calling web service " doc:id="0cd77fdd-1d5f-4cfd-b366-eeb4825f10ff" processor="wsc:consume">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="call SOAP web service to get cities" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="581c6f0f-016d-4da2-ba8a-fd4e7ea08c64" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[payload]" />
					<munit-tools:error typeId="WSC:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request method="GET" doc:name="Request" doc:id="516d6956-611d-44e0-99af-3b6aba3000a3" config-ref="HTTP_Request_Configuration" path="/cities">
				<http:headers ><![CDATA[#[output application/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
				<http:query-params ><![CDATA[#[output application/java
---
{
	"country" : "Australia"
}]]]></http:query-params>
			</http:request>
        </munit:execution>
		<munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 500" />
			<munit-tools:verify-call doc:name="Verify error handler call" doc:id="e7da59b1-f96e-4d13-aa6d-93c9a7a6953c" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="set connectivity error message" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="e98d4ff3-811e-472e-acc1-e50e81cbab43" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
        </munit:validation>
    </munit:test>
    
</mule>
